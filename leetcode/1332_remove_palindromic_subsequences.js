// Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
//
// Return the minimum number of steps to make the given string empty.
//
// A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
//
// A string is called palindrome if is one that reads the same backward as well as forward.
//
//
//
// Example 1:
//
// Input: s = "ababa"
// Output: 1
// Explanation: String is already palindrome
// Example 2:
//
// Input: s = "abb"
// Output: 2
// Explanation: "abb" -> "bb" -> "".
// Remove palindromic subsequence "a" then "bb".
// Example 3:
//
// Input: s = "baabb"
// Output: 2
// Explanation: "baabb" -> "b" -> "".
// Remove palindromic subsequence "baab" then "b".
// Example 4:
//
// Input: s = ""
// Output: 0
//
//
// Constraints:
//
// 0 <= s.length <= 1000
// s only consists of letters 'a' and 'b'
/**
 * @param {string} s
 * @return {number}
 */

// Because we know that only 2 unique letters can appear in the string, we know we can always solve the problem in at most 2 steps
// 1. Remove all the b's as a single subsequence
// 2. Remove all the a's as a single subsequence
var removePalindromeSub = function (s) {
  // if the string is empty we dont have to remove any subsequence
  if (!s) return 0;

  // 1 is entire string is a palindrome
  // 2 if the string is not empty and is not a palindrome then we would have to first remove all the a's then all the b's

  // if the string is a palindrone we need to remove a single palindromic subsequence
  var isPalindrome = function (string) {
    let start = 0;
    let end = string.length - 1;

    while (start < end) {
      if (string[start] !== string[end]) {
        return false;
      }
      start++;
      end--;
    }

    return true;
  };

  if (isPalindrome(s)) {
    return 1;
  }

  // if the string is not a palindrome and not empty that means we have to remove all the a's first then the b's next which involves at most 2 steps
  return 2;
};
